/* ComPHP.java */
/* Generated By:JavaCC: Do not edit this line. ComPHP.java */
package compilador;

public class ComPHP implements ComPHPConstants {

    public ComPHP() throws ParseException {
        ComPHP parser = new ComPHP(System.in);
        parser.gramaticaPrincipal();
    }

  static final public void gramaticaPrincipal() throws ParseException {
    jj_consume_token(MENOR);
    jj_consume_token(QUERY);
    jj_consume_token(PHP);
    jj_consume_token(QUERY);
    jj_consume_token(MAYOR);
  }

<<<<<<< HEAD
  static final public void control() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:{
      jj_consume_token(IF);
=======
  static final public void repeticion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHILE:{
      jj_consume_token(WHILE);
>>>>>>> estructuras-repeticion
      jj_consume_token(POP);
      jj_consume_token(PCL);
      jj_consume_token(KOP);
      jj_consume_token(KCL);
<<<<<<< HEAD
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELSEIF:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(ELSEIF);
        jj_consume_token(POP);
        jj_consume_token(PCL);
        jj_consume_token(KOP);
        jj_consume_token(KCL);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE:{
        jj_consume_token(ELSE);
        jj_consume_token(KOP);
        jj_consume_token(KCL);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      break;
      }
    case SWITCH:{
      jj_consume_token(SWITCH);
      jj_consume_token(POP);
      jj_consume_token(PCL);
      jj_consume_token(KOP);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CASE:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(CASE);
        jj_consume_token(PP);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEF:{
        jj_consume_token(DEF);
        jj_consume_token(PP);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
=======
      break;
      }
    case DO:{
      jj_consume_token(DO);
      jj_consume_token(KOP);
      jj_consume_token(KCL);
      jj_consume_token(WHILE);
      jj_consume_token(POP);
      jj_consume_token(PCL);
      jj_consume_token(PC);
      break;
      }
    case FOR:{
      jj_consume_token(FOR);
      jj_consume_token(POP);
      jj_consume_token(PC);
      jj_consume_token(PC);
      jj_consume_token(PCL);
      jj_consume_token(KOP);
>>>>>>> estructuras-repeticion
      jj_consume_token(KCL);
      break;
      }
    default:
<<<<<<< HEAD
      jj_la1[4] = jj_gen;
=======
      jj_la1[0] = jj_gen;
>>>>>>> estructuras-repeticion
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ComPHPTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
<<<<<<< HEAD
  static final private int[] jj_la1 = new int[5];
=======
  static final private int[] jj_la1 = new int[1];
>>>>>>> estructuras-repeticion
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
<<<<<<< HEAD
      jj_la1_0 = new int[] {0x100,0x80,0x400,0x800,0x240,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,};
=======
      jj_la1_0 = new int[] {0x3400,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,};
>>>>>>> estructuras-repeticion
   }

  /** Constructor with InputStream. */
  public ComPHP(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ComPHP(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ComPHPTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
<<<<<<< HEAD
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
=======
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
>>>>>>> estructuras-repeticion
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
<<<<<<< HEAD
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
=======
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
>>>>>>> estructuras-repeticion
  }

  /** Constructor. */
  public ComPHP(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ComPHPTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
<<<<<<< HEAD
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
=======
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
>>>>>>> estructuras-repeticion
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
<<<<<<< HEAD
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
=======
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
>>>>>>> estructuras-repeticion
  }

  /** Constructor with generated Token Manager. */
  public ComPHP(ComPHPTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
<<<<<<< HEAD
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
=======
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
>>>>>>> estructuras-repeticion
  }

  /** Reinitialise. */
  public void ReInit(ComPHPTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
<<<<<<< HEAD
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
=======
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
>>>>>>> estructuras-repeticion
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[64];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
<<<<<<< HEAD
    for (int i = 0; i < 5; i++) {
=======
    for (int i = 0; i < 1; i++) {
>>>>>>> estructuras-repeticion
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 64; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
