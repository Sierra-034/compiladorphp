
/*
 * Copyright © 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */


options {
    LOOKAHEAD = 1;
    CHOICE_AMBIGUITY_CHECK = 2;
    OTHER_AMBIGUITY_CHECK = 1;
    STATIC = false;
    DEBUG_PARSER = false;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
    ERROR_REPORTING = true;
    JAVA_UNICODE_ESCAPE = false;
    UNICODE_INPUT = false;
    IGNORE_CASE = false;
    USER_TOKEN_MANAGER = false;
    USER_CHAR_STREAM = false;
    BUILD_PARSER = true;
    BUILD_TOKEN_MANAGER = true;
    SANITY_CHECK = true;
    FORCE_LA_CHECK = false;
}

PARSER_BEGIN(ComPHP)

package compilador;

import java.util.ArrayList;

public class ComPHP {
    //ArrayList para almacenar los tokens
    private static ArrayList<Token> listValues = new ArrayList<Token>();
}

PARSER_END(ComPHP)


//Caracteres que debe omitir el analizador
SKIP:
{
    " "
|   "\n"
|   "\t"
|   "\r"

}

//Tokens para las estructuras de control del lenguaje
TOKEN:
{
    <PHP: "php">

    //Sentencias condicionales
|   <IF: "if">
|   <ELSE: "else">    
|   <ELSEIF: "elseif">
|   <SWITCH: "switch">
|   <CASE: "case">
|   <DEF: "default">

    //Sentencias de repetición
|   <FOR: "for">
|   <FOREACH: "foreach">
|   <WHILE: "while">
|   <DO: "do">
|   <BREAK: "break">
|   <CONTINUE: "continue">
|   <ENDFOR: "endfor">
|   <ENDWHILE: "endwhile">
|   <GOTO: "goto">

    //Funciones, clases, etc.
|   <FUNCTION: "function">  
|   <ARREGLO: "array">  

}

//Tokens para la inclusión de ficheros
TOKEN: 
{
    <INCLUDE: "include">
|   <INCLUDEONCE: "include_once">    
|   <REQUIRE: "require">    
|   <REQUIREONCE: "require_once"> 

}

//Tokens para definir los operadores 
TOKEN:
{
    //Operadores aritméticos
    <MAS: "+">
|   <MENOS: "-">
|   <MULTI: "*">
|   <DIV: "/">
|   <MOD: "%">

    //Operadores de asignación
|   <IGUAL: "="> 
|   <MASIGUAL: (<MAS>)(<IGUAL>)>    
|   <MENOSIGUAL: (<MENOS>)(<IGUAL>)>    
|   <MULTIIGUAL: (<MULTI>)(<IGUAL>)>    
|   <DIVIGUAL: (<DIV>)(<IGUAL>)>    
|   <MODIGUAL: (<MOD>)(<IGUAL>)>    
|   <PUNTOIGUAL: "."(<IGUAL>)>    //Concatenación de cadenas

    //Operadores de incremento y decremento
|   <INCREMENTO: (<MAS>)(<MAS>)>
|   <DECREMENTO: (<MENOS>)(<MENOS>)>

    //Operadores lógicos
|   <AND: ("&&" | "and")>
|   <OR: ("||" | "or")>
|   <NEGACION: "!">
|   <XOR: "xor">

    //Operadores de comparación
|   <IGUALDAD: (<IGUAL>)(<IGUAL>)>    
|   <NOIGUALDAD: (<NEGACION>)(<IGUAL>)>    
|   <IDENTICO: (<IGUAL>)(<IGUAL>)(<IGUAL>)>    
|   <NOIDENTICO: (<NEGACION>)(<IGUAL>)(<IGUAL>)>    
|   <MENOR: "<">    
|   <MAYOR: ">">    
|   <MENORIGUAL: (<MENOR>)(<IGUAL>)>    
|   <MAYORIGUAL: (<MAYOR>)(<IGUAL>)>  

    //Operador ternario de comparación
|   <QUERY: "?">

}

//Tokens para símbolos y caracteres especiales
TOKEN: 
{
    <DOLLAR: "$">   //Token para identificar las variables

|   <KOP: "{">
|   <KCL: "}">

|   <BOP: "[">
|   <BCL: "]">

|   <POP: "(">
|   <PCL: ")">

|   <PC: ";">
|   <COM: ",">
|   <PP: ":">

}

//Tokens dinámicos
TOKEN:
{
    <#digito: ["0"-"9"]>    //Esto es un token privado
|   <#letra: ["a"-"z", "A"-"Z"]>

    /*
      VALOR_INT coincide con
      uno o más de los digitos simples definidos 
      en el token privado 'digito'
    */
|   <VALOR_INT: (<digito>)+>

    /*
        VALOR_DOUBLE coincide con 
        uno o más dígitos simples seguidos de un punto
        y uno o más digitos simples
    */
|   <VALOR_DOUBLE: (<digito>)+ "." (<digito>)+>

    /*
        VALOR_BOOLEAN coincide con
        los valores estándares booleanos
        resultados de las operaciones booleanas
    */
|   <VALOR_BOOLEAN: ("true" | "false")>

    /*
        ID_FUNCION coincide con los nombres de
        las funciones ya que éstos al ser declarados
        o llamados no requieren del signo de dollar 
    */
|   <ID_FUNCION: ((<letra>) | "_") ((<letra>) | (<digito>))*>

    /*
        IDENTIFICADOR coincide con 
        signo de dollar, seguido de una letra o guión bajo,
        seguido de una secuencia de letras o dígitos
    */         
|   <IDENTIFICADOR: (<DOLLAR>) ((<letra>) | "_") ((<letra>) | (<digito>))*>

    /*
        ARRAY coincide con 
        un identificador seguido inmediatamente 
        por los corchetes y opcionalmente un 
        valor entero o identificador dentro 
        de los corchetes
    */
|   <ARRAY: <IDENTIFICADOR><BOP> ( <IDENTIFICADOR> | <VALOR_INT> )? <BCL>>

}

/*
    Esta gramática se utiliza para 
    iniciar cualquier programa en PHP 
    es el punto inicial. La parte más 
    ímportante son los delimitadores. 
    El uso de la gramática instrucción 
    valida cualquier tipo de instrucción PHP.
*/
void gramaticaPrincipal() :
{}
{
    <MENOR><QUERY><PHP>
        ( 
            instruccion()
        |   funcion()
        )*
    <QUERY><MAYOR>
}

/*
    Gramática función especifica cómo se deben 
    declarar las funciones
*/
void funcion() :
{}
{
    <FUNCTION> <ID_FUNCION> 
        "(" (<IDENTIFICADOR> ( <COM> <IDENTIFICADOR> )* )? ")"
    "{"
        ( instruccion() )*
    "}"
}  

/*
    LLamada a una función
    después de que se declaran las 
    funciones, éstas pueden ser llamadas
    como lo indica esta grammática
*/
void callFuncion() :
{}
{
    <ID_FUNCION> "("
        ( <IDENTIFICADOR> ( <COM> <IDENTIFICADOR> )* )? 
    ")"
}  

/*
    Una instrucción engloba todo aquello que 
    sirve para escribir un programa
    se dividieron en tres tipos principales
    las estructuras secuenciales, estructuras de
    control y las estructuras de repetición 
*/
void instruccion() :
{}
{
    ( 
            /*
                Instrucciones que requieren 
                de punto y coma para indicar 
                que la instrucción termina y 
                comienza otra
            */
            declaracionAsignacion() 
        |   callFuncion()
        |   <BREAK>
        |   <CONTINUE>
    )
    ";"
|
    (
            /*
                Instrucciones que no requieren 
                un punto y coma para indicar el 
                término de dicha instrucción
            */
            control() 
        |   repeticion()
    )    
}

/*
    La estructuras de control sirven 
    para ejecutar o no cierta porción 
    de código dependiendo de alguna condición.

    Existen dos variantes de estas estructuras,
    La estructura IF y la SWITCH.
*/
void control() :
{}
{
    (
        /*
            Estructuras de control IF y sus variantes
            coincide con un if simple, if con else,
            if con elseif, if con elseif con else.

            Se garantiza la existencia de un if antes
            de cualquier else o elseif
        */
        <IF>"(" expresion() ")"
        "{"
            ( 
                instruccion() 
            |   funcion()
            )*
        "}"
        (
            <ELSEIF>"(" expresion() ")"
            "{"
                ( 
                    instruccion() 
                |   funcion()
                )*
            "}"
        )*
        (
            <ELSE> 
            "{"
                ( 
                    instruccion()
                |   funcion()
                )*
            "}"
        )?
    )
|
    (
        /*
            Estructura de control Switch
            coincide con una estructura switch
            convencional
        */
        <SWITCH>"{" expresion() ")"
        "{"
            /*
                La instrucción case puede ir cero o más veces
            */
            (
                <CASE><VALOR_INT>":"
                    ( instruccion() )*
            )*

            /*
                La instrucción default puede no aparecer
                o puede aparecer solo una vez
            */
            (
                <DEF>":"
                    ( instruccion() )*
            )?
        "}"
    )
}            

/*
    Las estructuras de repetición permiten
    ejecutar o no un fragmento de código
    cero o varias veces dependiendo de una
    condición dada. Similar a las estructuras de control
*/
void repeticion() :
{}
{
    (
        /* 
            --WHILE--
            Instrucción de repetición while 
            considerar la forma de dos puntos
            'while(): Instrucciones endwhile;'
        */
        <WHILE>"(" expresion() ")"
        "{"
            ( instruccion() )*
        "}"
    )
|
    (
        /*
            --DO..WHILE--
            Instrucción de repetición 'do...while'
            solo hay una sintaxis para esta estructura de repetición
            gracias al universo XD 
        */
        <DO>
        "{"
            ( instruccion() )*
        "}"<WHILE>"(" expresion() ");"
    )
|
    (
        /*
            --FOR--
            Instrucción de repeticón 'for' 
            existe la sintaxis tradicional
            y la sintaxis de dos puntos
            'for(): Instrucciones endfor;'
        */
        <FOR>"(" expresion() ";" expresion() ";" expresion() ")"
        "{"
            ( instruccion() )*
        "}"
    )
}

/*
    Esta gramática valida la declaración
    y validación de una variable. En PHP 
    no se pueden declarar las variables sin
    ser inicializadas al mismo tiempo.
*/
void declaracionAsignacion() :
{
    Token token;
}
{
    (
        token = <IDENTIFICADOR> { System.out.println(token.image); }
            (
                operadorAsignacion() 
                (    
                        expresion() { 
                            try {
                                
                                System.out.println(listValues);
                                int expressionType = SemanticManager.compareTypes(listValues);
                                SemanticManager.addVariable(token , expressionType);
                                
                            } catch(SemanticException ex) {
                                System.err.println(ex);
                            } finally {
                                listValues.clear();
                                System.out.println(listValues);
                            }
                        }
                    |   array() 
                )
                |   <INCREMENTO> 
            ) 

            |   (<INCREMENTO> | <DECREMENTO> ) valorIdentificador()
    )
}

/*
    Valida cualquier operación primitiva 
    que se pueda realizar en PHP, es decir, 
    operaciones aritméticas, relacionales y booleanas.

    La gramática expresión considera a todas 
    estas expresiones como del mismo tipo. Todas
    las expresiones podrán devolver dos tipos 
    de valores a sean booleanos o aritméticos
*/
void expresion() :
{
    Token jToken;
    int type;
}
{
    (     jToken = <VALOR_BOOLEAN>  { listValues.add(jToken); }
        | jToken = <VALOR_INT>      { listValues.add(jToken); }
        | jToken = <VALOR_DOUBLE>   { listValues.add(jToken); }
        | jToken = <IDENTIFICADOR>  { 
            try {
                type = SemanticManager.checkVariable(jToken); 
                jToken.kind = type;
                listValues.add(jToken);
                
            } catch (SemanticException e) {
                //TODO: handle exception
            }
            
                                    }
        | callFuncion() 
        | "(" expresion() ")" 
    )

    ( operador() expresion() )*
}

/*
    Creación de arreglos de formalmente.
    Esta gramática ayuda a especificar 
    claves relacionadas con cada valor 
    del arreglo así como los índices 
    convencionales pero en este caso permiten
    especificar otro tipo de claves asociadas 
    a los valores como strings o enteros.
*/
void array() :
{}
{
    <ARREGLO> 
    "("
        (
            valor() 
            ( 
                "," 
            |   <IGUAL> <MAYOR> valor() ","
            )            
        )+
    ")"
}    

/*
    Elgoba todos los tipos de operadores
    relacionales, asignación, aritméticos y lógicos
*/
void operador() :
{}
{
    ( operadorAsignacion() | operadorAritmetico() | operadorRelacional() | operadorLogico() )
}

/*
    Engloba todos los tipos de valores
    que se pueden manejar en PHP, desde
    los arreglos, hasta los valores numéricos
*/
void valor() :
{}
{
    ( valorIdentificador() | callFuncion() | <VALOR_BOOLEAN> | valorNumerico() )
}

/*
    Cualquier valor que sea referenciado
    a través de un identificador. Estos podrían
    ser numéricos, booleanos o cadenas.
*/
void valorIdentificador() :
{}
{
    ( <IDENTIFICADOR> | <ARRAY> )
}

/*
    Cualquier tipo de valor numérico
    de tipo entero o decimal (de coma flotante)
*/
void valorNumerico() :
{
    Token jToken;
}
{
    (     jToken = <VALOR_INT>      { listValues.add(jToken); }
        | jToken = <VALOR_DOUBLE>   { listValues.add(jToken); }
    )
}

/*
    Operadores de asignación
    Para usar estos operadores 
    debe existir un 'valorIdentificador' que lo preceda
    seguido de cualquier expresión.

    Se omiten preincremento, predecremento, posincremento y posdecremento
    por no definir su clase 
*/
void operadorAsignacion() :
{}
{
    ( <IGUAL> | <MASIGUAL> | <MENOSIGUAL> | <MULTIIGUAL> | <DIVIGUAL> | <MODIGUAL> | <PUNTOIGUAL> )
}

/*
    Operadores Aritméticos
    Estos operadores deben usarse solo en 
    expresiones aritméticas y con operadores numéricos

    Se omiten preincremento, predecremento, posincremento y posdecremento
    por no definir su clase     
*/
void operadorAritmetico() :
{}
{
    ( <MAS> | <MENOS> | <MULTI> | <DIV> | <MOD> )
}

/*
    Operadores Relacionales
    Estos operadores deben usarse solo en 
    expresiones booleanas y con operandos aritméticos
*/
void operadorRelacional() :
{}
{
    ( <IGUALDAD> | <NOIGUALDAD> | <IDENTICO> | <NOIDENTICO> | <MENOR> | <MAYOR> | <MENORIGUAL> | <MAYORIGUAL> )
}

/*
    Operadores Lógicos
    Estos operadores deben usarse solo en 
    expresiones booleanas y con operandos lógicos
    que generen valores 'true' o 'flase'

    Se omite la negación por cuestión de número de operandos
    en posteriores utilizaciones
*/
void operadorLogico() : 
{}
{
    ( <AND> | <OR> | <XOR> )
}