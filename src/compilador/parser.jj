
/*
 * Copyright © 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */


options {
    LOOKAHEAD = 1;
    CHOICE_AMBIGUITY_CHECK = 2;
    OTHER_AMBIGUITY_CHECK = 1;
    STATIC = true;
    DEBUG_PARSER = false;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
    ERROR_REPORTING = true;
    JAVA_UNICODE_ESCAPE = false;
    UNICODE_INPUT = false;
    IGNORE_CASE = false;
    USER_TOKEN_MANAGER = false;
    USER_CHAR_STREAM = false;
    BUILD_PARSER = true;
    BUILD_TOKEN_MANAGER = true;
    SANITY_CHECK = true;
    FORCE_LA_CHECK = false;
}

PARSER_BEGIN(ComPHP)

package compilador;

public class ComPHP {

    public ComPHP() throws ParseException {
        ComPHP parser = new ComPHP(System.in);
        parser.gramaticaPrincipal();
    }

}

PARSER_END(ComPHP)


//Caracteres que debe omitir el analizador
SKIP:
{
    " "
|   "\n"
|   "\t"
|   "\r"

}

//Tokens para las estructuras de control del lenguaje
TOKEN:
{
    <PHP: "php">

    //Sentencias condicionales
|   <IF: "if">
|   <ELSE: "else">    
|   <ELSEIF: "elseif">
|   <SWITCH: "switch">

    //Sentencias de repetición
|   <FOR: "for">
|   <FOREACH: "foreach">
|   <WHILE: "while">
|   <DO: "do">
|   <BREAK: "break">
|   <CONTINUE: "continue">
|   <ENDFOR: "endfor">
|   <ENDWHILE: "endwhile">
|   <GOTO: "goto">

}

//Tokens para la inclusión de ficheros
TOKEN: 
{
    <INCLUDE: "include">
|   <INCLUDEONCE: "include_once">    
|   <REQUIRE: "require">    
|   <REQUIREONCE: "require_once"> 

}

//Tokens para definir los operadores 
TOKEN:
{
    //Operadores aritméticos
    <MAS: "+">
|   <MENOS: "-">
|   <MULTI: "*">
|   <DIV: "/">
|   <MOD: "%">

    //Operadores de asignación
|   <IGUAL: "="> 
|   <MASIGUAL: (<MAS>)(<IGUAL>)>    
|   <MENOSIGUAL: (<MENOS>)(<IGUAL>)>    
|   <MULTIIGUAL: (<MULTI>)(<IGUAL>)>    
|   <DIVIGUAL: (<DIV>)(<IGUAL>)>    
|   <MODIGUAL: (<MOD>)(<IGUAL>)>    
|   <PUNTOIGUAL: "."(<IGUAL>)>    //Concatenación de cadenas

    //Operadores de incremento y decremento
|   <INCREMENTO: (<MAS>)(<MAS>)>
|   <DECREMENTO: (<MENOS>)(<MENOS>)>

    //Operadores lógicos
|   <AND: ("&&" | "and")>
|   <OR: ("||" | "or")>
|   <NEGACION: "!">
|   <XOR: "xor">

    //Operadores de comparación
|   <IGUALDAD: (<IGUAL>)(<IGUAL>)>    
|   <NOIGUALDAD: (<NEGACION>)(<IGUAL>)>    
|   <IDENTICO: (<IGUAL>)(<IGUAL>)(<IGUAL>)>    
|   <NOIDENTICO: (<NEGACION>)(<IGUAL>)(<IGUAL>)>    
|   <MENOR: "<">    
|   <MAYOR: ">">    
|   <MENORIGUAL: (<MENOR>)(<IGUAL>)>    
|   <MAYORIGUAL: (<MAYOR>)(<IGUAL>)>  

    //Operador ternario de comparación
|   <QUERY: "?">

}

//Tokens para símbolos y caracteres especiales
TOKEN: 
{
    <DOLLAR: "$">   //Token para identificar las variables

|   <KOP: "{">
|   <KCL: "}">

|   <BOP: "[">
|   <BCL: "]">

|   <POP: "(">
|   <PCL: ")">

|   <PC: ";">
|   <PP: ":">

}

//Tokens dinámicos
TOKEN:
{
    <#digito: ["0"-"9"]>    //Esto es un token privado
|   <#letra: ["a"-"z", "A"-"Z"]>

    /*
      VALOR_INT coincide con
      uno o más de los digitos simples definidos 
      en el token privado 'digito'
    */
|   <VALOR_INT: (<digito>)+>

    /*
        VALOR_DOULE coincide con 
        uno o más dígitos simples seguidos de un punto
        y uno o más digitos simples
    */
|   <VALOR_DOULE: (<digito>)+ "." (<digito>)+>

    /*
        IDENTIFICADOR coincide con 
        signo de dollar, seguido de una letra o guión bajo,
        seguido de una secuencia de letras o dígitos
    */         
|   <IDENTIFICADOR: (<DOLLAR>) ((<letra>) | "_") ((<letra>) | (<digito>))*>        

}

void gramaticaPrincipal() :
{}
{
    <MENOR><QUERY><PHP>
    <QUERY><MAYOR>
}

void repeticion() :
{}
{
    (
        /* 
            --WHILE--
            Instrucción de repetición while 
            considerar la forma de dos puntos
            'while(): Instrucciones endwhile;'
        */
        <WHILE><POP>/* Expresión booleana aquí */<PCL>
        <KOP>
            /* Instrucciones aquí */
        <KCL>
    )
|
    (
        /*
            --DO..WHILE--
            Instrucción de repetición 'do...while'
            solo hay una sintaxis para esta estructura de repetición
            gracias al universo XD 
        */
        <DO>
        <KOP>
            /* Instrucciones aquí */
        <KCL><WHILE><POP>/* Expresión booleana aquí */<PCL><PC>
    )
|
    (
        /*
            --FOR--
            Instrucción de repeticón 'for' 
            existe la sintaxis tradicional
            y la sintaxis de dos puntos
            'for(): Instrucciones endfor;'
        */
        <FOR><POP>/* Expresión */<PC>/* Expresión */<PC>/* Expresión */<PCL>
        <KOP>
            /* Instrucciones */
        <KCL>
    )
}