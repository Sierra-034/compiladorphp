/* ComPHPTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ComPHPTokenManager.java */
package compilador;

/** Token Manager. */
@SuppressWarnings("unused")public class ComPHPTokenManager implements ComPHPConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000L) != 0L)
            return 32;
         if ((active0 & 0x40000000L) != 0L)
            return 3;
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 69;
            return 11;
         }
         if ((active0 & 0x40000000000000L) != 0L)
            return 51;
         if ((active0 & 0x100000000L) != 0L)
            return 38;
         if ((active0 & 0x203000L) != 0L)
         {
            jjmatchedKind = 69;
            return 27;
         }
         if ((active0 & 0x4000000000000L) != 0L)
            return 20;
         if ((active0 & 0x2000000000000L) != 0L)
            return 18;
         if ((active0 & 0x20000000L) != 0L)
            return 1;
         if ((active0 & 0x1000079fcfe0L) != 0L)
         {
            jjmatchedKind = 69;
            return 30;
         }
         if ((active0 & 0x80000000000L) != 0L)
            return 42;
         if ((active0 & 0x80000000L) != 0L)
            return 5;
         if ((active0 & 0x10000000L) != 0L)
            return 35;
         return -1;
      case 1:
         if ((active0 & 0x100007ff7fa0L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
            return 30;
         }
         if ((active0 & 0x8040L) != 0L)
            return 30;
         return -1;
      case 2:
         if ((active0 & 0x7ff4f80L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 69;
               jjmatchedPos = 2;
            }
            return 30;
         }
         if ((active0 & 0x100000003020L) != 0L)
            return 30;
         return -1;
      case 3:
         if ((active0 & 0x7ef6a00L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 69;
               jjmatchedPos = 3;
            }
            return 30;
         }
         if ((active0 & 0x100580L) != 0L)
            return 30;
         return -1;
      case 4:
         if ((active0 & 0x7ae2b00L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 4;
            return 30;
         }
         if ((active0 & 0x414000L) != 0L)
            return 30;
         return -1;
      case 5:
         if ((active0 & 0x7aa2800L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 5;
            return 30;
         }
         if ((active0 & 0x40300L) != 0L)
            return 30;
         return -1;
      case 6:
         if ((active0 & 0x2a0000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 69;
               jjmatchedPos = 6;
            }
            return 30;
         }
         if ((active0 & 0x7802800L) != 0L)
            return 30;
         return -1;
      case 7:
         if ((active0 & 0x2a0000L) != 0L)
            return 30;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjStartNfaWithStates_0(0, 43, 42);
      case 36:
         return jjStartNfaWithStates_0(0, 54, 51);
      case 37:
         return jjStartNfaWithStates_0(0, 31, 5);
      case 40:
         return jjStopAtPos(0, 59);
      case 41:
         return jjStopAtPos(0, 60);
      case 42:
         return jjStartNfaWithStates_0(0, 29, 1);
      case 43:
         return jjStartNfaWithStates_0(0, 27, 32);
      case 44:
         return jjStopAtPos(0, 62);
      case 45:
         return jjStartNfaWithStates_0(0, 28, 35);
      case 47:
         return jjStartNfaWithStates_0(0, 30, 3);
      case 58:
         return jjStopAtPos(0, 63);
      case 59:
         return jjStopAtPos(0, 61);
      case 60:
         return jjStartNfaWithStates_0(0, 49, 18);
      case 61:
         return jjStartNfaWithStates_0(0, 32, 38);
      case 62:
         return jjStartNfaWithStates_0(0, 50, 20);
      case 63:
         return jjStopAtPos(0, 53);
      case 91:
         return jjStopAtPos(0, 57);
      case 93:
         return jjStopAtPos(0, 58);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x20400L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x8800L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xc0180L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x203000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1800040L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x6000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 123:
         return jjStopAtPos(0, 55);
      case 125:
         return jjStopAtPos(0, 56);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000800L);
      case 102:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 6, 30);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4020L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x180L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x18c0000L);
      case 111:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 15, 30);
         return jjMoveStringLiteralDfa2_0(active0, 0x100000123000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x410000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4200L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x220000L);
      case 112:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 5, 30);
         break;
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000L);
      case 114:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 30);
         return jjMoveStringLiteralDfa3_0(active0, 0x402000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x580L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x410800L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 101:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 30);
         return jjMoveStringLiteralDfa4_0(active0, 0x2100L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x1804000L);
      case 111:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 30);
         break;
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x20200L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x6000000L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 30);
         break;
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x6020100L);
      case 107:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 30);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x1800800L);
      case 121:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x1800000L);
      case 102:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 30);
         break;
      case 104:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 30);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x280000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 114:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 30);
         return jjMoveStringLiteralDfa6_0(active0, 0x6000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x5000000L);
      case 104:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 30);
         break;
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 116:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 30);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x5000000L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 30);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 30);
         break;
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 21, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x5000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x5000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x5000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(11, 24);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(11, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 61;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 42:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 44;
                  if (curChar == 61)
                  {
                     if (kind > 46)
                        kind = 46;
                  }
                  break;
               case 27:
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  { jjCheckNAdd(30); }
                  break;
               case 32:
                  if (curChar == 43)
                  {
                     if (kind > 39)
                        kind = 39;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 36)
                     { jjAddStates(3, 4); }
                  else if (curChar == 33)
                     { jjAddStates(5, 6); }
                  else if (curChar == 61)
                     { jjAddStates(7, 8); }
                  else if (curChar == 45)
                     { jjAddStates(9, 10); }
                  else if (curChar == 43)
                     { jjAddStates(11, 12); }
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  { jjCheckNAdd(30); }
                  break;
               case 35:
                  if (curChar == 45)
                  {
                     if (kind > 40)
                        kind = 40;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  break;
               case 38:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 40;
                  if (curChar == 61)
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  break;
               case 1:
                  if (curChar == 61 && kind > 35)
                     kind = 35;
                  break;
               case 2:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if (curChar == 61 && kind > 36)
                     kind = 36;
                  break;
               case 4:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if (curChar == 61 && kind > 37)
                     kind = 37;
                  break;
               case 6:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if (curChar == 61 && kind > 38)
                     kind = 38;
                  break;
               case 8:
                  if (curChar == 38 && kind > 41)
                     kind = 41;
                  break;
               case 9:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 17:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if (curChar == 61 && kind > 51)
                     kind = 51;
                  break;
               case 19:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if (curChar == 61 && kind > 52)
                     kind = 52;
                  break;
               case 31:
                  if (curChar == 43)
                     { jjAddStates(11, 12); }
                  break;
               case 33:
                  if (curChar == 43 && kind > 39)
                     kind = 39;
                  break;
               case 34:
                  if (curChar == 45)
                     { jjAddStates(9, 10); }
                  break;
               case 36:
                  if (curChar == 45 && kind > 40)
                     kind = 40;
                  break;
               case 37:
                  if (curChar == 61)
                     { jjAddStates(7, 8); }
                  break;
               case 39:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if (curChar == 61 && kind > 47)
                     kind = 47;
                  break;
               case 41:
                  if (curChar == 33)
                     { jjAddStates(5, 6); }
                  break;
               case 43:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if (curChar == 61 && kind > 48)
                     kind = 48;
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAdd(46); }
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 48:
                  if (curChar == 46)
                     { jjCheckNAdd(49); }
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  { jjCheckNAdd(49); }
                  break;
               case 50:
                  if (curChar == 36)
                     { jjAddStates(3, 4); }
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(13, 14); }
                  break;
               case 56:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(58, 59); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(60, 59); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 27:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     { jjCheckNAdd(30); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(54, 55); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                     { jjCheckNAdd(52); }
                  }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     { jjCheckNAdd(30); }
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 13;
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     { jjCheckNAdd(30); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if (curChar == 100 && kind > 41)
                     kind = 41;
                  break;
               case 12:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 124 && kind > 42)
                     kind = 42;
                  break;
               case 14:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 114 && kind > 42)
                     kind = 42;
                  break;
               case 16:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 21:
                  if (curChar == 101 && kind > 68)
                     kind = 68;
                  break;
               case 22:
                  if (curChar == 117)
                     { jjCheckNAdd(21); }
                  break;
               case 23:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 115)
                     { jjCheckNAdd(21); }
                  break;
               case 26:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 28:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  { jjCheckNAdd(30); }
                  break;
               case 30:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  { jjCheckNAdd(30); }
                  break;
               case 52:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  { jjCheckNAdd(52); }
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(54, 55); }
                  break;
               case 54:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(54, 55); }
                  break;
               case 55:
                  if (curChar == 91)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(58, 59); }
                  break;
               case 58:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(58, 59); }
                  break;
               case 59:
                  if (curChar == 93)
                     kind = 71;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 61 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   46, 47, 48, 51, 53, 42, 43, 38, 39, 35, 36, 32, 33, 54, 55, 56, 
   60, 59, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\160\150\160", "\151\146", "\145\154\163\145", 
"\145\154\163\145\151\146", "\163\167\151\164\143\150", "\143\141\163\145", 
"\144\145\146\141\165\154\164", "\146\157\162", "\146\157\162\145\141\143\150", "\167\150\151\154\145", 
"\144\157", "\142\162\145\141\153", "\143\157\156\164\151\156\165\145", 
"\145\156\144\146\157\162", "\145\156\144\167\150\151\154\145", "\147\157\164\157", 
"\146\165\156\143\164\151\157\156", "\141\162\162\141\171", "\151\156\143\154\165\144\145", 
"\151\156\143\154\165\144\145\137\157\156\143\145", "\162\145\161\165\151\162\145", 
"\162\145\161\165\151\162\145\137\157\156\143\145", "\53", "\55", "\52", "\57", "\45", "\75", null, null, null, null, null, null, 
null, null, null, null, "\41", "\170\157\162", null, null, null, null, "\74", "\76", 
null, null, "\77", "\44", "\173", "\175", "\133", "\135", "\50", "\51", "\73", 
"\54", "\72", null, null, null, null, null, null, null, null, };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ComPHPTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public ComPHPTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 61; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  static public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xfcL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[61];
    static private final int[] jjstateSet = new int[2 * 61];

    
    static protected char curChar;
}
